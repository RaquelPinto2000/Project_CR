/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdlib.h>
#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "fsl.h"
#include "xtmrctr_l.h"
#include "xil_printf.h"

/****************************** Definitions **********************************/

typedef int bool;

#define min(a, b)		((a < b) ? a : b)

#define N				16 //16 palavras de 32 bits = 512 bits / 8 = 64 bytes
#define MAX 32
#define DMA_DEVICE_ID	XPAR_AXIDMA_0_DEVICE_ID

/*****************************  Helper Functions *****************************/

void PrintDataArray(int* pData, unsigned int size)
{
	int* p;

	xil_printf("\n\r");
	for (p = pData; p < pData + size; p++)
	{
		xil_printf("%08x  ", *p);
	}
}

//size = (sizeof(pData)/sizeof(pData[0]))
void PrintArray(int* pData, int size)
{
	xil_printf("\n\r");
	for (int i = 0;i<size; i++){
			xil_printf("%d", pData[i]);
	}
}

void ResetPerformanceTimer()
{
	XTmrCtr_Disable(XPAR_TMRCTR_0_BASEADDR, 0);
	XTmrCtr_SetLoadReg(XPAR_TMRCTR_0_BASEADDR, 0, 0x00000001);
	XTmrCtr_LoadTimerCounterReg(XPAR_TMRCTR_0_BASEADDR, 0);
	XTmrCtr_SetControlStatusReg(XPAR_TMRCTR_0_BASEADDR, 0, 0x00000000);
}

void RestartPerformanceTimer()
{
	ResetPerformanceTimer();
	XTmrCtr_Enable(XPAR_TMRCTR_0_BASEADDR, 0);
}

unsigned int GetPerformanceTimer()
{
	return XTmrCtr_GetTimerCounterReg(XPAR_TMRCTR_0_BASEADDR, 0);
}

unsigned int StopAndGetPerformanceTimer()
{
	XTmrCtr_Disable(XPAR_TMRCTR_0_BASEADDR, 0);
	return GetPerformanceTimer();
}

void initArray(int *data, int size){
	for (int i = 0;i<size; i++){
		data[i]=0;
	}
}

void decToBinary(int * data, long int num, int size){
	int i = 0;
	//int size = (sizeof(data)/sizeof(data[0]));
	initArray(data,size);
	while(num > 0)
	{
		data[i] =  num % 2;
		i++;
		num = num / 2;
	}

}

int CheckPalindromeSw(int* pData1, int size)
{
    for (int j = size; j >0; j--) {
		if (pData1[j-1] != pData1[size-j]){
		    return 0;
		}
	}
	return 1;
}

int counter_PalindromeSW(int* pData1, int size){
	int counter = 0;
	for (int i = 0;i<size;i++){
		if(pData1[i]==1){
			counter = counter +1;
		}
	}
	return counter;
}


int CheckPalindromeHw(int* pDst, int* pSrc, unsigned int size)
{
	int* p;
	int counter = 0;
	for (p = pSrc; p < pSrc + size; p++, pDst++)
	{
		//macros: *p - o valor a passar, 0 - o numero da interface, FSL_DEFAULT - flags (by default)
		putfslx(*p, 0, FSL_DEFAULT); //entrada slave stream do nosso modulo (le da memoria)
		//xil_printf("\nRESULT hardware = %d \n", 	Xil_In32(XPAR_CHECKCOUNTPALINDROME_0_S00_AXI_BASEADDR + 0));

		//counter acumulativo
		int result = Xil_In32(XPAR_CHECKCOUNTPALINDROME_0_S00_AXI_BASEADDR + 0);
		Xil_Out32(XPAR_CHECKCOUNTPALINDROME_0_S00_AXI_BASEADDR + 4, result);
		if (result==1){
			counter=counter+1;
		}

//		Performs a get function on an input FSL of the MicroBlaze processor;
//		id is the FSL identifier and is a literal in the range of 0 to 7 (0 to 15 for MicroBlaze v7.00.a and later).
//		The semantics of the instruction is determined by the valid FSL macro flags, which are listed in Table 2

		getfslx(*pDst, 0, FSL_DEFAULT); //entrada master stream do nosso modulo (escreve na memoria)

	}
	return counter;
}

bool CheckCounterPalindrome(int* dstDataSW, int* dstDataHW,int counterSW, int counterHW, int size){

	for (int i = 0 ;i<size;i++){
		if(dstDataSW[i] != dstDataHW[i] || counterSW!=counterHW){
			return FALSE;
		}
	}
	return TRUE;
}

int main()
{

	int srcData[N], dstDataSW[N], dstDataHW[N];
	unsigned int timeElapsed;
	int counterSW = 0;
	int counterHW = 0;
	init_platform();

	xil_printf("\r\nFilling memory with pseudo-random data...");
	RestartPerformanceTimer();
	srand(0);

	timeElapsed = StopAndGetPerformanceTimer();
	xil_printf("\n\rMemory initialization time: %d microseconds\n\r",
			   timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000));
	//PrintDataArray(srcData, min(16, N));
	xil_printf("\n\r");

	//------------------------------------------SOTFWARE---------------------------------------
	RestartPerformanceTimer();

	//palindromos = 9 -> indices 0, 3, 4, 6, 8, 9, 11, 13, 15
	srcData[0] = 1704565158; //01100101100110011001100110100110
	srcData[1] = 3023014426; //10110100001011111000101000011010
	srcData[2] = 2492252386; //10010100100011001100000011100010
	srcData[3] = 4294967295; //11111111111111111111111111111111
	srcData[4] = 0; 		 //00000000000000000000000000000000
	srcData[5] = 4230737452; //11111100001010111110111000101100
	srcData[6] = 2702176389; //10100001000011111111000010000101
	srcData[7] = 767213316;  //00101101101110101011111100000100
	srcData[8] = 3536044875; //11010010110000111100001101001011
	srcData[9] = 190593744;  //00001011010111000011101011010000
	srcData[10] = 463115274; //00011011100110101001010000001010
	srcData[11] = 3567625515;//11010100101001011010010100101011
	srcData[12] = 520016216; //00011110111111101101000101011000
	srcData[13] = 2483703849;//10010100000010100101000000101001
	srcData[14] = 3567633678;//11010100101001011100010100001110
	srcData[15] = 463100376; //00011011100110100101100111011000

	/*
	for (int i = 1; i < N-1; i++){
		srcData[i] = rand();
	}*/


	for (int i = 0;i<N;i++){
		int bin[MAX];
		int size = (sizeof(bin)/sizeof(bin[0]));
		decToBinary(bin,srcData[i],size);
		for (int i = 0;i<(sizeof(bin)/sizeof(bin[0])); i++){
			xil_printf("%d", bin[i]);
		}
		xil_printf("\n");
		dstDataSW[i] = CheckPalindromeSw(bin, (sizeof(bin)/sizeof(bin[0])));
	}


	xil_printf("\nRESULT\n");
	for (int i = 0;i<(sizeof(dstDataSW)/sizeof(dstDataSW[0]));i++){
		xil_printf("%d", dstDataSW[i]);
	}
	xil_printf("\n");
	int size_dstData = (sizeof(dstDataSW)/sizeof(dstDataSW[0]));
	counterSW = counter_PalindromeSW(dstDataSW, size_dstData);
	xil_printf("\nResultado software counter -> %d", counterSW);
	//2184
	//3000=BB8

	timeElapsed = StopAndGetPerformanceTimer();
	xil_printf("\n\rSoftware only time: %d microseconds",
			   timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000));
	//PrintDataArray(dstData, min(16, N));


//------------------------------------------HARDWARE---------------------------------------



	RestartPerformanceTimer();

	int sizeDst = sizeof(dstDataHW)/sizeof(dstDataHW[0]);
	counterHW = CheckPalindromeHw(dstDataHW, srcData, sizeDst);
	xil_printf("\nResultado counter -> %d", counterHW);

	timeElapsed = StopAndGetPerformanceTimer();
	xil_printf("\n\rHardware assisted reverse endianness time: %d microseconds",
				   timeElapsed / (XPAR_CPU_M_AXI_DP_FREQ_HZ / 1000000));

	xil_printf("\n\rChecking result: %s\n\r",
	    	CheckCounterPalindrome(dstDataSW, dstDataHW, counterSW, counterHW, N) ? "OK" : "Error");
    cleanup_platform();
    return 0;
}
